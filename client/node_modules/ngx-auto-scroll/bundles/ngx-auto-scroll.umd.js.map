{"version":3,"file":"ngx-auto-scroll.umd.js","sources":["~/ngx-auto-scroll/src/ngx-auto-scroll.module.ts","~/ngx-auto-scroll/src/ngx-auto-scroll.directive.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { NgxAutoScroll } from './ngx-auto-scroll.directive';\nexport class NgxAutoScrollModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n\tdeclarations: [NgxAutoScroll],\n\timports: [],\n\texports: [NgxAutoScroll]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxAutoScrollModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxAutoScrollModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxAutoScrollModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {AfterContentInit, Directive, ElementRef, HostListener, Input, OnDestroy} from '@angular/core';\nexport class NgxAutoScroll implements AfterContentInit, OnDestroy {\npublic lockYOffset: number = 10;\npublic observeAttributes: string = \"false\";\nprivate nativeElement: HTMLElement;\nprivate _isLocked: boolean = false;\nprivate mutationObserver: MutationObserver;\n/**\n * @param {?} element\n */\nconstructor(element: ElementRef) {\n        this.nativeElement = element.nativeElement;\n    }\n/**\n * @return {?}\n */\npublic getObserveAttributes(): boolean {\n        return this.observeAttributes !== \"\" && this.observeAttributes.toLowerCase() !== \"false\";\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentInit(): void {\n        this.mutationObserver = new MutationObserver(() => {\n            if (!this._isLocked) {\n                this.scrollDown();\n            }\n        });\n        this.mutationObserver.observe(this.nativeElement, {\n            childList: true,\n            subtree: true,\n            attributes: this.getObserveAttributes(),\n        });\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.mutationObserver.disconnect();\n    }\n/**\n * @return {?}\n */\npublic forceScrollDown(): void {\n        this.scrollDown();\n    }\n/**\n * @return {?}\n */\npublic isLocked(): boolean {\n      return this._isLocked;\n    }\n/**\n * @return {?}\n */\nprivate scrollDown(): void {\n        this.nativeElement.scrollTop = this.nativeElement.scrollHeight;\n    }\n/**\n * @return {?}\n */\nprivate scrollHandler(): void {\n        const /** @type {?} */ scrollFromBottom = this.nativeElement.scrollHeight - this.nativeElement.scrollTop - this.nativeElement.clientHeight;\n        this._isLocked = scrollFromBottom > this.lockYOffset;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: \"[ngx-auto-scroll]\",\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'lockYOffset': [{ type: Input, args: [\"lock-y-offset\", ] },],\n'observeAttributes': [{ type: Input, args: [\"observe-attributes\", ] },],\n'scrollHandler': [{ type: HostListener, args: [\"scroll\", ] },],\n};\n}\n\nfunction NgxAutoScroll_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxAutoScroll.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxAutoScroll.ctorParameters;\n/** @type {?} */\nNgxAutoScroll.propDecorators;\n/** @type {?} */\nNgxAutoScroll.prototype.lockYOffset;\n/** @type {?} */\nNgxAutoScroll.prototype.observeAttributes;\n/** @type {?} */\nNgxAutoScroll.prototype.nativeElement;\n/** @type {?} */\nNgxAutoScroll.prototype._isLocked;\n/** @type {?} */\nNgxAutoScroll.prototype.mutationObserver;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgModule","HostListener","Input","ElementRef","Directive"],"mappings":"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"}
